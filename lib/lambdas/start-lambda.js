"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_ec2_1 = require("@aws-sdk/client-ec2");
const INSTANCE_ID = 'i-0113697bf55dbbd00';
exports.handler = async () => {
    var _a, _b, _c;
    let result, statusCode;
    try {
        const ec2Result = await spinUpInstance();
        result = (_c = (_b = (_a = ec2Result.StartingInstances) === null || _a === void 0 ? void 0 : _a.find(i => i.InstanceId === INSTANCE_ID)) === null || _b === void 0 ? void 0 : _b.CurrentState) === null || _c === void 0 ? void 0 : _c.Name;
        statusCode = result ? 200 : 404;
        result = result !== null && result !== void 0 ? result : 'not found';
    }
    catch (e) {
        console.error(`[ERROR] ${e}`);
        statusCode = 500;
        result = 'error';
    }
    return {
        statusCode,
        headers: {
            'Access-Control-Allow-Origin': '*',
        },
        body: JSON.stringify({ result }),
        isBase64Encoded: false,
    };
};
// Starts up an EC2 instance.
// For now, we are targeting an instance that we've already created.
const spinUpInstance = async () => {
    const client = new client_ec2_1.EC2Client({ region: 'us-west-2' });
    const command = new client_ec2_1.StartInstancesCommand({
        InstanceIds: [INSTANCE_ID]
    });
    return await client.send(command);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQtbGFtYmRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhcnQtbGFtYmRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9EQUFzRTtBQUd0RSxNQUFNLFdBQVcsR0FBRyxxQkFBcUIsQ0FBQTtBQUU1QixRQUFBLE9BQU8sR0FBRyxLQUFLLElBQW9DLEVBQUU7O0lBQ2hFLElBQUksTUFBTSxFQUFFLFVBQVUsQ0FBQTtJQUN0QixJQUFJO1FBQ0YsTUFBTSxTQUFTLEdBQUcsTUFBTSxjQUFjLEVBQUUsQ0FBQTtRQUN4QyxNQUFNLHFCQUFHLFNBQVMsQ0FBQyxpQkFBaUIsMENBQ2hDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLEtBQUssV0FBVywyQ0FDdEMsWUFBWSwwQ0FBRSxJQUFJLENBQUE7UUFDdEIsVUFBVSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUE7UUFDL0IsTUFBTSxHQUFHLE1BQU0sYUFBTixNQUFNLGNBQU4sTUFBTSxHQUFJLFdBQVcsQ0FBQTtLQUMvQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDN0IsVUFBVSxHQUFHLEdBQUcsQ0FBQTtRQUNoQixNQUFNLEdBQUcsT0FBTyxDQUFBO0tBQ2pCO0lBRUQsT0FBTztRQUNMLFVBQVU7UUFDVixPQUFPLEVBQUU7WUFDUCw2QkFBNkIsRUFBRSxHQUFHO1NBQ25DO1FBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQztRQUNoQyxlQUFlLEVBQUUsS0FBSztLQUN2QixDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsNkJBQTZCO0FBQzdCLG9FQUFvRTtBQUNwRSxNQUFNLGNBQWMsR0FBRyxLQUFLLElBQUksRUFBRTtJQUNoQyxNQUFNLE1BQU0sR0FBRyxJQUFJLHNCQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQTtJQUNyRCxNQUFNLE9BQU8sR0FBRyxJQUFJLGtDQUFxQixDQUFDO1FBQ3hDLFdBQVcsRUFBRSxDQUFDLFdBQVcsQ0FBQztLQUMzQixDQUFDLENBQUE7SUFFRixPQUFPLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUNuQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFQzJDbGllbnQsIFN0YXJ0SW5zdGFuY2VzQ29tbWFuZCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1lYzInXG5pbXBvcnQgeyBBUElHYXRld2F5UHJveHlSZXN1bHQgfSBmcm9tICdhd3MtbGFtYmRhJ1xuXG5jb25zdCBJTlNUQU5DRV9JRCA9ICdpLTAxMTM2OTdiZjU1ZGJiZDAwJ1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jICgpOiBQcm9taXNlPEFQSUdhdGV3YXlQcm94eVJlc3VsdD4gPT4ge1xuICBsZXQgcmVzdWx0LCBzdGF0dXNDb2RlXG4gIHRyeSB7XG4gICAgY29uc3QgZWMyUmVzdWx0ID0gYXdhaXQgc3BpblVwSW5zdGFuY2UoKVxuICAgIHJlc3VsdCA9IGVjMlJlc3VsdC5TdGFydGluZ0luc3RhbmNlc1xuICAgICAgPy5maW5kKGkgPT4gaS5JbnN0YW5jZUlkID09PSBJTlNUQU5DRV9JRClcbiAgICAgID8uQ3VycmVudFN0YXRlPy5OYW1lXG4gICAgc3RhdHVzQ29kZSA9IHJlc3VsdCA/IDIwMCA6IDQwNFxuICAgIHJlc3VsdCA9IHJlc3VsdCA/PyAnbm90IGZvdW5kJ1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihgW0VSUk9SXSAke2V9YClcbiAgICBzdGF0dXNDb2RlID0gNTAwXG4gICAgcmVzdWx0ID0gJ2Vycm9yJ1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdGF0dXNDb2RlLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicsXG4gICAgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHJlc3VsdCB9KSxcbiAgICBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlLFxuICB9XG59XG5cbi8vIFN0YXJ0cyB1cCBhbiBFQzIgaW5zdGFuY2UuXG4vLyBGb3Igbm93LCB3ZSBhcmUgdGFyZ2V0aW5nIGFuIGluc3RhbmNlIHRoYXQgd2UndmUgYWxyZWFkeSBjcmVhdGVkLlxuY29uc3Qgc3BpblVwSW5zdGFuY2UgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGNsaWVudCA9IG5ldyBFQzJDbGllbnQoeyByZWdpb246ICd1cy13ZXN0LTInIH0pXG4gIGNvbnN0IGNvbW1hbmQgPSBuZXcgU3RhcnRJbnN0YW5jZXNDb21tYW5kKHtcbiAgICBJbnN0YW5jZUlkczogW0lOU1RBTkNFX0lEXVxuICB9KVxuXG4gIHJldHVybiBhd2FpdCBjbGllbnQuc2VuZChjb21tYW5kKVxufVxuIl19