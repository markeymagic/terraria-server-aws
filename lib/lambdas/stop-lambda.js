"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_ec2_1 = require("@aws-sdk/client-ec2");
const INSTANCE_ID = 'i-0113697bf55dbbd00';
exports.handler = async () => {
    var _a, _b, _c;
    let result, statusCode;
    try {
        const ec2Result = await spinDownInstance();
        result = (_c = (_b = (_a = ec2Result.StoppingInstances) === null || _a === void 0 ? void 0 : _a.find(i => i.InstanceId === INSTANCE_ID)) === null || _b === void 0 ? void 0 : _b.CurrentState) === null || _c === void 0 ? void 0 : _c.Name;
        statusCode = result ? 200 : 404;
        result = result !== null && result !== void 0 ? result : 'not found';
    }
    catch (e) {
        console.error(`[ERROR] ${e}`);
        statusCode = 500;
        result = 'error';
    }
    return {
        statusCode,
        headers: {
            'Access-Control-Allow-Origin': '*',
        },
        body: JSON.stringify({ result }),
        isBase64Encoded: false,
    };
};
// Stops an EC2 instance.
// For now, we are targeting an instance that we've already created.
const spinDownInstance = async () => {
    const client = new client_ec2_1.EC2Client({ region: 'us-west-2' });
    const command = new client_ec2_1.StopInstancesCommand({
        InstanceIds: [INSTANCE_ID],
    });
    return await client.send(command);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcC1sYW1iZGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdG9wLWxhbWJkYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvREFBcUU7QUFHckUsTUFBTSxXQUFXLEdBQUcscUJBQXFCLENBQUE7QUFFNUIsUUFBQSxPQUFPLEdBQUcsS0FBSyxJQUFvQyxFQUFFOztJQUNoRSxJQUFJLE1BQU0sRUFBRSxVQUFVLENBQUE7SUFDdEIsSUFBSTtRQUNGLE1BQU0sU0FBUyxHQUFHLE1BQU0sZ0JBQWdCLEVBQUUsQ0FBQTtRQUMxQyxNQUFNLHFCQUFHLFNBQVMsQ0FBQyxpQkFBaUIsMENBQ2hDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLEtBQUssV0FBVywyQ0FDdEMsWUFBWSwwQ0FBRSxJQUFJLENBQUE7UUFDdEIsVUFBVSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUE7UUFDL0IsTUFBTSxHQUFHLE1BQU0sYUFBTixNQUFNLGNBQU4sTUFBTSxHQUFJLFdBQVcsQ0FBQTtLQUMvQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDN0IsVUFBVSxHQUFHLEdBQUcsQ0FBQTtRQUNoQixNQUFNLEdBQUcsT0FBTyxDQUFBO0tBQ2pCO0lBRUQsT0FBTztRQUNMLFVBQVU7UUFDVixPQUFPLEVBQUU7WUFDUCw2QkFBNkIsRUFBRSxHQUFHO1NBQ25DO1FBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQztRQUNoQyxlQUFlLEVBQUUsS0FBSztLQUN2QixDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQseUJBQXlCO0FBQ3pCLG9FQUFvRTtBQUNwRSxNQUFNLGdCQUFnQixHQUFHLEtBQUssSUFBSSxFQUFFO0lBQ2xDLE1BQU0sTUFBTSxHQUFHLElBQUksc0JBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFBO0lBQ3JELE1BQU0sT0FBTyxHQUFHLElBQUksaUNBQW9CLENBQUM7UUFDdkMsV0FBVyxFQUFFLENBQUMsV0FBVyxDQUFDO0tBQzNCLENBQUMsQ0FBQTtJQUVGLE9BQU8sTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0FBQ25DLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVDMkNsaWVudCwgU3RvcEluc3RhbmNlc0NvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtZWMyJ1xuaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5UmVzdWx0IH0gZnJvbSAnYXdzLWxhbWJkYSdcblxuY29uc3QgSU5TVEFOQ0VfSUQgPSAnaS0wMTEzNjk3YmY1NWRiYmQwMCdcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoKTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHQ+ID0+IHtcbiAgbGV0IHJlc3VsdCwgc3RhdHVzQ29kZVxuICB0cnkge1xuICAgIGNvbnN0IGVjMlJlc3VsdCA9IGF3YWl0IHNwaW5Eb3duSW5zdGFuY2UoKVxuICAgIHJlc3VsdCA9IGVjMlJlc3VsdC5TdG9wcGluZ0luc3RhbmNlc1xuICAgICAgPy5maW5kKGkgPT4gaS5JbnN0YW5jZUlkID09PSBJTlNUQU5DRV9JRClcbiAgICAgID8uQ3VycmVudFN0YXRlPy5OYW1lXG4gICAgc3RhdHVzQ29kZSA9IHJlc3VsdCA/IDIwMCA6IDQwNFxuICAgIHJlc3VsdCA9IHJlc3VsdCA/PyAnbm90IGZvdW5kJ1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihgW0VSUk9SXSAke2V9YClcbiAgICBzdGF0dXNDb2RlID0gNTAwXG4gICAgcmVzdWx0ID0gJ2Vycm9yJ1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdGF0dXNDb2RlLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicsXG4gICAgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHJlc3VsdCB9KSxcbiAgICBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlLFxuICB9XG59XG5cbi8vIFN0b3BzIGFuIEVDMiBpbnN0YW5jZS5cbi8vIEZvciBub3csIHdlIGFyZSB0YXJnZXRpbmcgYW4gaW5zdGFuY2UgdGhhdCB3ZSd2ZSBhbHJlYWR5IGNyZWF0ZWQuXG5jb25zdCBzcGluRG93bkluc3RhbmNlID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjbGllbnQgPSBuZXcgRUMyQ2xpZW50KHsgcmVnaW9uOiAndXMtd2VzdC0yJyB9KVxuICBjb25zdCBjb21tYW5kID0gbmV3IFN0b3BJbnN0YW5jZXNDb21tYW5kKHtcbiAgICBJbnN0YW5jZUlkczogW0lOU1RBTkNFX0lEXSxcbiAgfSlcblxuICByZXR1cm4gYXdhaXQgY2xpZW50LnNlbmQoY29tbWFuZClcbn1cbiJdfQ==